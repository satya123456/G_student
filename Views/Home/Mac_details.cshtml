@model Gstudent.Models.Mac_details

<style>
    .ri-corner-down-right-fill {
        color: #b1040e;
        font-size: 18px;
    }

    .sub-box {
        border: 1px solid #e8e2e2;
        padding: 15px;
        margin-bottom: 15px;
        background-color: #fff;
        box-shadow: var(--box-shadow);
    }

    ol {
        padding-left: 15px;
        margin-bottom: 0;
    }
    /*  .modal-backdrop.show {
        z-index: 100;
    }

    .swal2-popup.swal2-modal.swal2-show {
        z-index: 999999999999999999;
    }

    .modal {
        z-index: 1000;
    }*/
    .swal2-container {
        z-index: 1000000000 !important;
    }

    .modal-backdrop.show {
    }
</style>


<div class="content-container contentContainer">
    <div class="d-flex justify-content-between">
        <h5 class="page-title">Internet access</h5>
        <div class="back">
            <a href="javascript:void(0);" onclick="location.reload();">
                <i class='bx bx-arrow-back'></i>
            </a>
        </div>
    </div>

    @using (Ajax.BeginForm("Createmac_details", "Home", new AjaxOptions { HttpMethod = "POST", LoadingElementId = "loading", OnSuccess = "persuccess", OnFailure = "return onError(event)" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.id, new { @id = "id", @name = "id" })
        @Html.HiddenFor(model => model.otp, new { @id = "otp", @name = "otp" })

        <div class="box-container">
            @if (string.IsNullOrEmpty(Model.MAC2))
            {
                <div class="row">
                    <!-- Registration Number -->
                    <div class="col-12 col-sm-12 col-md-12 col-xl-2">
                        <div class="form-group">
                            <label>Registration number</label>
                            <input class="form-control" style="height: 32px; overflow: hidden;" name="regdno" id="regdno" value="@Model.Regdno" readonly />
                        </div>
                    </div>

                    <!-- Name -->
                    <div class="col-12 col-sm-12 col-md-12 col-xl-4">
                        <div class="form-group">
                            <label>Name</label>
                            <input class="form-control" style="height: 32px; overflow: hidden;" name="name" id="name" value="@Model.Name" readonly />
                        </div>
                    </div>

                    <!-- MAC Address 1 -->
                    <div class="col-12 col-sm-12 col-md-12 col-xl-3">
                        <div class="form-group">
                            <label>MAC address 1<span style="color:red">*</span></label>
                            <input class="form-control nospace" style="height: 32px; overflow: hidden;" name="MAC1" id="MAC1" value="@Model.MAC1" maxlength="17" onkeypress="return ValidateText(event);" onkeyup="removemsg1('validmsg3');" />
                            <div id="validationMessage" class="error"></div>
                        </div>
                    </div>

                    <!-- MAC Address 2 -->
                    <div class="col-12 col-sm-12 col-md-12 col-xl-3" id="mac2Container">
                        <div class="form-group">
                            <label>MAC address 2</label>
                            <input class="form-control nospace" style="height: 32px; overflow: hidden;" name="MAC2" id="MAC2" value="@Model.MAC2" maxlength="17" onkeypress="return ValidateText(event);" onkeyup="removemsg1('validmsg3');" />
                            <div id="validationMessage1" class="error"></div>
                        </div>
                    </div>
                </div>

                <!-- Submit and Reset Buttons -->
                <div class="row">
                    <div class="col-12 btns-group" id="submitarea">
                        <button type="button" class="btn btn-primary" id="btnsubmit" onclick="validatetextbox_update(event);">Submit</button>
                        <button class="btn btn-secondary" type="button" onclick="Reset_mac();">Reset</button>
                    </div>
                </div>
            }

            <!-- MAC Details Table -->
            @if (!string.IsNullOrEmpty(Model.MAC1))
            {
                <div class="row exam_tbl">
                    <h5 class="text-center">MAC Details</h5>
                    <div class="table-responsive table_style">
                        <table class="table table-bordered tbl-style sub_table">
                            <thead>
                                <tr>
                                    <th>Registration Number</th>
                                    <th>Name</th>
                                    @if (!string.IsNullOrEmpty(Model.MAC2))
                                    {
                                        <th>MAC Address 1</th>
                                        <th>MAC Address 2</th>
                                    }
                                    else
                                    {
                                        <th>MAC Address 1</th>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.MAC2))
                                    {
                                        <th>Action</th>
                                    }
                                </tr>
                            </thead>
                            <tbody class="el3 upload_item">
                                <tr class="upload_docs">
                                    <td>@Model.Regdno</td>
                                    <td>@Model.Name</td>
                                    @if (!string.IsNullOrEmpty(Model.MAC2))
                                    {
                                        <td>@Model.MAC1</td>
                                        <td>@Model.MAC2</td>
                                    }
                                    else
                                    {
                                        <td>@Model.MAC1</td>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.MAC2))
                                    {
                                        <td><button type="button" class="btn btn-primary" onclick="enableEdit()">Edit</button></td>
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            }



            @if (!string.IsNullOrEmpty(Model.MAC2))
            {
                <style>
                    #mac2Container, #submitarea, #regdno, #name {
                        display: none;
                    }
                </style>
            }
        </div>
    }
</div>

<div id="myModal" class="modal" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="heading_dynamicaaly">Instructions to find your device’s MAC address:</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z">
                        </path>
                    </svg>
                </button>

            </div>
            <div class="modal-body">
                <div class="box-container">

                    <h6><a>Windows 10, 8, 7, Vista</a></h6>
                    <div class="sub-box">
                        <ol>
                            <li>
                                Click&nbsp;<b>Windows</b>&nbsp;<b>Start&nbsp;</b>or press
                                the&nbsp;<b>Windows</b>&nbsp;key.
                            </li>
                            <li>In the search box, type&nbsp;<b>cmd</b>.&nbsp;&nbsp;</li>
                            <li>
                                Press the <b>Enter</b> key.<br />
                                A command window displays.
                            </li>
                            <li>Type&nbsp;<b>ipconfig /all</b>.</li>
                            <li>
                                Press&nbsp;<b>Enter</b>.<br />
                                A physical address displays for each adapter. The physical address is your
                                device&rsquo;s MAC address.
                            </li>
                        </ol>
                    </div>


                    <h6><a>Windows 2000, 2003, XP, NT</a></h6>
                    <div class="sub-box">
                        <ol>
                            <li>
                                Click&nbsp;<b>Start &gt; Run</b>.<br />
                                A Run text box appears.
                            </li>
                            <li value="2">In the Run text box, type&nbsp;<b>cmd</b>.</li>
                            <li value="3">
                                Press <b>Enter</b>.<br />
                                A command prompt displays.
                            </li>
                            <li value="4">In the command prompt, type&nbsp;<b>ipconfig /all</b>.</li>
                            <li value="5">
                                Press&nbsp;<b>Enter</b>.<br />
                                Under Ethernet adapter wireless network connection, a Physical address displays. This is
                                your computer&rsquo;s Ethernet MAC address.
                            </li>
                        </ol>
                    </div>

                    <h6><a><b>Macintosh OS X</b></a></h6>
                    <div class="sub-box">
                        <ol>
                            <li>
                                Select&nbsp;<b>
                                    Apple Icon &gt; System Preferences &gt; Network &gt;
                                    Advanced.&nbsp;
                                </b><br />
                                A network box displays.
                            </li>
                            <li>
                                Select&nbsp;<b>WiFi.&nbsp;</b><br />
                                A WiFi address or Airport address displays. This is your device&rsquo;s MAC address.
                            </li>
                        </ol>
                    </div>


                    <h6><a id="linux" name="linux">Linux / Unix</a></h6>
                    <div class="sub-box">
                        <ol>
                            <li>Launch the terminal</li>
                            <li>Type <b>fconfig</b> in terminal</li>
                            <li>Your MAC address is displayed</li>
                        </ol>
                    </div>


                    <h6><a id="ios" name="ios">IOS</a></h6>
                    <div class="sub-box">
                        <p>
                            Select&nbsp;<b>Settings &gt; General &gt; About.</b><br />
                            A Wi-Fi address displays. This is your device&rsquo;s MAC address.
                        </p>
                    </div>


                    <h6><a id="android" name="android">Android</a></h6>
                    <div class="sub-box">
                        <ol>
                            <li>In most cases, you can follow this procedure to locate your MAC address:</li>

                            <li>
                                Select&nbsp;<b>Settings &gt; About device &gt; status.</b><br />
                                A WiFi address or WiFi MAC address displays. This is your device&rsquo;s MAC address.
                            </li>

                            <li>If this does not work, refer to your device&rsquo;s user manual.</li>
                        </ol>
                    </div>
                </div>


            </div>

        </div>

    </div>

</div>

<div id="myModalOTP" class="modal" role="dialog">
    <div class="modal-dialog modal-lg">

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="heading_dynamicaaly">Otp for MAC</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z">
                        </path>
                    </svg>
                </button>

            </div>
            <!--<div class="modal-body">

                <div id="inner">

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label> OTP<span style="color:red">*</span></label>
                                <input type="text" class="form-control" ID="otp_modal" placeholder="Enter your otp" name="otp_modal" value="" maxlength="6" onkeypress=" removemsg('validmsg4'); return ValidateNumberdot(event);" />
                                <div>Resend OTP in <span id="timer"></span>Seconds</div>-->
            @*<p> Resend OTP in <span id="countdowntimer"> </span> Seconds</p>*@
            <!--<input type="hidden" id="otp_original" />
                            </div>
                        </div>
                        <div class="col-md-2 mt-3">
                            <div class="text-center">
                                <input type="submit" class="btn btn-primary" value="Confirm" id="Submitform" onclick="ConfirmForm();" />
                            </div>
                        </div>
                        <div class="col-md-2 mt-3">
                            <div class="text-center">
                                <input type="button" class="btn btn-primary" value="Resend" id="btnsubmit1" onclick="validatetextbox_resend(event);" disabled />
                            </div>
                        </div>
                    </div>
                </div>


            </div>-->

        </div>

    </div>
</div>
<div class="modal container-fluid" id="macEditModal" tabindex="-1" role="dialog" aria-labelledby="macEditModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="macEditModalLabel">Edit MAC Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Ajax.BeginForm("UpdateMacs", "Home", new AjaxOptions { HttpMethod = "POST", LoadingElementId = "loading", OnSuccess = "perupdate", OnFailure = "return onError(event)" }))
            {

                <div class="modal-body">
                    <!-- Content loaded via AJAX goes here -->
                    <div id="macModalContent"></div>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        Close
                    </button>
                    <button type="button" class="btn btn-success" onclick="mac_update();">Update</button>
                </div>
            }
        </div>
    </div>
</div>



<div id="myModal12" class="modal" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="heading_dynamicaaly">How to turn off MAC randomization, step by step</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z">
                        </path>
                    </svg>
                </button>

            </div>
            <div class="modal-body">
                <div class="box-container">
                    <p class="mb-1">
                        Here are the steps to turn off MAC randomization on wireless clients for different devices.
                    </p>

                    <p class="mb-1">
                        Note that depending on the manufacturer and version of operating system, some devices may have
                        different settings or differently worded options.
                    </p>


                    <h6>iOS (iPhone/iPad) steps to disable MAC randomization</h6>
                    <div class="sub-box">
                        <ol>
                            <li>Go to <b>Settings > Wi-Fi.</b></li>
                            <li>
                                Tap the (i) icon next to the network for which you want to disable MAC randomization.
                            </li>
                            <li>
                                Toggle off the Private address option.
                            </li>

                        </ol>
                    </div>


                    <h6>Android steps to disable MAC randomization</h6>
                    <div class="sub-box">
                        <ol>
                            <li>Go to <b>Settings > Wi-Fi.</b></li>
                            <li>Tap the icon next to the network you for which want to disable MAC randomization.</li>
                            <li>Under Privacy, select use device MAC address.</li>

                        </ol>
                    </div>

                    <h6>Windows steps to disable MAC randomization</h6>
                    <div class="sub-box">
                        <p class="mb-1">
                            Note that randomization is disabled by default in Windows, so you only need to
                            disable it if it has actively been enabled in the past. The steps are mostly the same for
                            Windows 10 and 11.
                        </p>
                        <p class="mb-1">If randomization is generally enabled for all networks :</p>
                        <ol>
                            <li>
                                Go to <b> Settings > Networks & Internet > Wi-Fi.</b>
                            </li>
                            <li>
                                Turn off <b> Random Hardware addresses.</b>
                            </li>

                        </ol>
                        <p class="mb-1">If randomization is turned on for one or some networks :</p>
                        <ol>
                            <li>
                                Go to <b> Settings > Networks & Internet > Wi-Fi.</b>
                            </li>

                            <li>Click "Manage Known Networks".</li>
                            <li>
                                Select the network for which you want to disable MAC randomization. In windows 10 you
                                also need to click <b> Properties.</b>
                            </li>
                            <li> Turn off <b> Random Hardware addresses.</b></li>
                        </ol>
                    </div>


                    <h6>MAC randomization on Mac OS X</h6>
                    <div class="sub-box">
                        <p class="mb-1">
                            On Mac OS X, Mac randomization currently only applies to AirPlay and AirDrop and
                            there are no settings to disable this.
                        </p>
                    </div>


                    <h6>MAC randomization on Linux></h6>
                    <div class="sub-box">
                        <p>
                            Linux operating systems do not have MAC randomization by default and require additional
                            packages such as the "macchanger" package on Ubuntu to enable MAC address randomization.
                        </p>
                    </div>


                    <h6><a id="android" name="android">Android</a></h6>
                    <div class="sub-box">
                        <ol>
                            <li>In most cases, you can follow this procedure to locate your MAC address :</li>

                            <li>
                                Select&nbsp;<b>Settings &gt; About device &gt; status.</b><br />
                                A WiFi address or WiFi MAC address displays. This is your device&rsquo;s MAC address.
                            </li>

                            <li>If this does not work, refer to your device&rsquo;s user manual.</li>
                        </ol>
                    </div>
                </div>


            </div>

        </div>

    </div>

</div>


<script type="text/javascript">
    // Disable MAC1 field if it already has a value on page load
    window.onload = function () {
        var mac1Field = document.getElementById('MAC1');
        var mac2Container = document.getElementById('mac2Container');

        if (mac1Field.value !== "") {
            mac1Field.disabled = true;  // Disable MAC1 if it already has a value
            mac2Container.style.display = 'block';  // Show MAC2 input
        }
    };
    //function persuccess(e) {
    //    var error = e;
    //    if (error === "Successfully submitted" || error === "Successfully updated") {
    //        swal({
    //            title: error,
    //            icon: 'success',
    //            buttons: 'OK'
    //        }).then(() => {
    //            // Disable MAC1 after successful submission
    //            var mac1Field = document.getElementById('MAC1');
    //            var mac2Container = document.getElementById('mac2Container');

    //            if (mac1Field && mac1Field.value !== "") {
    //                mac1Field.disabled = true;  // Disable MAC1
    //            }
    //            mac2Container.style.display = 'block';  // Show MAC2 input
    //        });

    //        $('.modal-backdrop.show').css('display', 'none');
    //        timerOn = false;
    //         flag = 0;
    //         flag1 = 0;
    //        loadConfigView('69');
    //        //setTimeout(loaddata, 1500);
    //    }
    //    else if (error === "Please enter valid otp") {
    //        swal('Please enter valid otp', '', 'warning');
    //        setTimeout(loaddata, 1500);
    //    } else {
    //        swal('Cancelled', '', 'error');
    //        setTimeout(loaddata, 1500);
    //    }
    //}
    function persuccess(e) {
        var error = e;
        if (error === "Successfully submitted" || error === "Successfully updated") {
            swal({
                title: error,
                icon: 'success',
                buttons: 'OK'
            }).then(() => {
                // Disable MAC1 after successful submission
                var mac1Field = document.getElementById('MAC1');
                var mac2Container = document.getElementById('mac2Container');

                if (mac1Field && mac1Field.value !== "") {
                    mac1Field.disabled = true;  // Disable MAC1
                }

                // Show MAC2 input if it was hidden and re-enable it
                mac2Container.style.display = 'block';
                $('#MAC2').prop('disabled', false); // Enable MAC2 for new entry

                // Re-bind MAC2 validation logic after MAC1 submission
                $('#MAC2').off('input'); // Unbind previous event handlers to avoid conflicts
                $('#MAC2').on('input', function () {
                    var mac1 = $('#MAC1').val(); // Get MAC1 value
                    var macAddress = $(this).val();
                    var macRegex = /^([0-9A-Fa-f]{2}[:\-]){5}([0-9A-Fa-f]{2})$/;
                    var validationMessage = $('#validationMessage1');

                    // Check if MAC2 is the same as MAC1 (Duplicate MAC)
                    let cleanMac1 = mac1.replace(/[:\-]/g, '').toLowerCase();
                    let cleanMac2 = macAddress.replace(/[:\-]/g, '').toLowerCase();

                    if (cleanMac1 === cleanMac2) {
                        validationMessage.text('MAC1 and MAC2 cannot be the same.').css('color', 'red');
                        flag1 = 1;
                        return false;
                    }

                    // Check if the second character is 2, 6, A, or E (Randomized MAC)
                    if (macAddress.length > 1 && ['2', '6', 'A', 'E', 'a', 'e'].includes(macAddress[1])) {
                        validationMessage.text('MAC address is randomized and cannot be used.').css('color', 'red');
                        flag1 = 1;
                        return false;
                    }

                    // Validate MAC2 format
                    if (macRegex.test(macAddress)) {
                        $.ajax({
                            type: 'GET',
                            url: "./Home/macdetailscheck",
                            datatype: JSON,
                            data: { 'macid': macAddress },
                            success: function (response) {
                                if (response == 1) {
                                    validationMessage.text('This MAC ID was already accessed').css('color', 'red');
                                    flag1 = 1;
                                } else {
                                    validationMessage.text('');
                                    flag1 = 0;
                                }
                            }
                        });
                    } else {
                        validationMessage.text('Invalid MAC address').css('color', 'red');
                        flag1 = 1;
                    }
                });
            });

            // Reset flags and load the updated view or data
            $('.modal-backdrop.show').css('display', 'none');
            flag = 0;
            flag1 = 0;
            loadConfigView('69');
            //setTimeout(loaddata, 1500);
        }
        else if (error === "Please enter valid otp") {
            swal('Please enter valid otp', '', 'warning');
            setTimeout(loaddata, 1500);
        } else {
            swal('Cancelled', '', 'error');
            setTimeout(loaddata, 1500);
        }
    }

    function validateMAC2() {
        var mac1Field = document.getElementById('MAC1');
        var mac2Field = document.getElementById('MAC2');
        var validationMessage = document.getElementById('validationMessage1');

        if (mac2Field.value !== "" && mac2Field.value === mac1Field.value) {
            validationMessage.innerHTML = "Please enter different MAC";
            validationMessage.style.color = "red";
            return false;
        } else {
            validationMessage.innerHTML = "";
            return true;
        }
    }

    // Add event listener to MAC2 input
    document.getElementById('MAC2').addEventListener('blur', validateMAC2);
</script>
<script>
    var flag = 0;
    var flag1 = 0;
    var otp_mac = "";

    function ValidateText(evt) {
        var keyCode = (evt.which) ? evt.which : evt.keyCode
        if ((keyCode < 65 || keyCode > 90) && (keyCode < 97 || keyCode > 123) && keyCode != 32 && !(keyCode >= 48 && keyCode <= 57) && !(keyCode == 38) && !(keyCode == 40) && !(keyCode == 41) && !(keyCode == 44) && !(keyCode == 45) && !(keyCode == 47) && !(keyCode == 46) && !(keyCode == 58) && !(keyCode == 13))
            return false;
        return true;

    }

    function ValidateText1(evt) {
        var keyCode = (evt.which) ? evt.which : evt.keyCode
        if ((keyCode < 65 || keyCode > 90) && (keyCode < 97 || keyCode > 123) && keyCode != 32 && !(keyCode >= 48 && keyCode <= 57) && !(keyCode == 38) && !(keyCode == 40) && !(keyCode == 41) && !(keyCode == 44) && !(keyCode == 45) && !(keyCode == 47) && !(keyCode == 46) && !(keyCode == 58) && !(keyCode == 13))
            return false;
        return true;

    }
    let timerOn = false;
    function timer(remaining) {

        var m = Math.floor(remaining / 60);
        var s = remaining % 60;

        m = m < 10 ? '0' + m : m;
        s = s < 10 ? '0' + s : s;
        document.getElementById('timer').innerHTML = m + ':' + s;
        remaining -= 1;

        if (remaining >= 0 && timerOn) {
            setTimeout(function () {
                timer(remaining);
            }, 1000);
            return false;
        }

        if (!timerOn) {

            return false;
        }

        $("#btnsubmit1").prop("disabled", false);
        $("#Submitform").prop("disabled", true);
        // alert('Timeout for otp');
    }


    function ValidateNumberdot(e) {
        var specialKeys = new Array();
        specialKeys.push("Backspace"); //Backspace
        specialKeys.push("Delete"); //Delete
        specialKeys.push("Enter"); //Enter
        specialKeys.push("Tab"); //Tab
        specialKeys.push("."); //dot
        var keyCode = e.keyCode != 32 ? e.key : -1;
        //var ret = ((keyCode >= 48 && keyCode <= 57) || keyCode == 13 || specialKeys.indexOf(keyCode) != -1 || keyCode == 66 || keyCode == 68 || keyCode == 84 || keyCode == 98 || keyCode == 100 || keyCode == 115 || keyCode == 109 || keyCode == 77);
        var ret = ((keyCode >= 0 && keyCode <= 9) || specialKeys.indexOf(keyCode) != -1 || (keyCode >= 106 && keyCode <= 115) || keyCode == 46);
        return ret;
    };


    // MAC1 input handler
    $('#MAC1').on('input', function () {
        var macAddress = $(this).val();
        //var macRegex = /^([0-9A-Fa-f]{2}[:]{1}){5}[0-9A-Fa-f]{2}$/; // Regex to allow only colon format

        var macRegex = /^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$/;
        var validationMessage = $('#validationMessage');

        // Reset flag for each input change
        flag = 0;

        // **1. Check if the MAC address contains any hyphens**
        if (macAddress.includes('-')) {
            validationMessage.text('Mac address must contain only colons :').css('color', 'red');
            flag = 1;
            return false;
        }

        // **2. Check if the second character is 2, 6, A, or E (Randomized MAC)**
        if (macAddress.length > 1 && ['2', '6', 'A', 'E', 'a', 'e'].includes(macAddress[1])) {
            validationMessage.text('MAC address is randomized and cannot be used.').css('color', 'red');
            flag = 1;
            return false;
        }

        // **3. Validate MAC format**
        if (macRegex.test(macAddress)) {
            $.ajax({
                type: 'GET',
                url: "./Home/macdetailscheck",
                datatype: JSON,
                data: { 'macid': macAddress },
                success: function (response) {
                    if (response == 1) {
                        validationMessage.text('This MAC ID was already accessed').css('color', 'red');
                        flag = 1;
                    } else {
                        validationMessage.text(''); // Clear only when MAC is valid and not accessed
                        flag = 0;
                    }
                }
            });
        } else {
            validationMessage.text('Invalid MAC address').css('color', 'red');
            flag = 1; // Keep error message persistent for invalid format
        }
    });

    $('#MAC2').on('input', function () {
        debugger;
        var mac1 = $('#MAC1').val(); // Get MAC1 value
        var macAddress = $(this).val();
        //var macRegex = /^([0-9A-Fa-f]{2}[:]{1}){5}[0-9A-Fa-f]{2}$/; // Regex to allow only colon format

        var macRegex = /^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$/;
        var validationMessage = $('#validationMessage1');

        //// Reset flag1 for each input
        //flag1 = 0;
        if (macAddress == '') {
            validationMessage.text('');
            flag1 = 0;
            return false;
        }

        // **2. Hyphen validation: Immediate rejection**
        else if (macAddress.includes('-')) {
            validationMessage.text('Mac address must contain only colons :').css('color', 'red');
            flag1 = 1;
            return false;
        }

        // **3. Duplicate check with MAC1**
        let cleanMac1 = mac1.replace(/[:]/g, '').toLowerCase();
        let cleanMac2 = macAddress.replace(/[:]/g, '').toLowerCase();
        if (cleanMac1 === cleanMac2) {
            validationMessage.text('MAC1 and MAC2 cannot be the same.').css('color', 'red');
            flag1 = 1;
            return false;
        }

        if (macAddress.length > 1 && ['2', '6', 'A', 'E', 'a', 'e'].includes(macAddress[1])) {
            validationMessage.text('MAC address is randomized and cannot be used.').css('color', 'red');
            flag1 = 1;
            return false;
        }

        //if (macAddress.includes('-')) {
        //    validationMessage.text('Mac address must contain only colons :').css('color', 'red');
        //    flag1 = 1;
        //    return false;
        //}

        // **5. Validate MAC format**
        else if (macRegex.test(macAddress)) {
            $.ajax({
                type: 'GET',
                url: "./Home/macdetailscheck",
                datatype: JSON,
                data: { 'macid': macAddress },
                success: function (response) {
                    if (response == 1) {
                        validationMessage.text('This MAC ID was already accessed').css('color', 'red');
                        flag1 = 1;
                    } else {
                        validationMessage.text(''); // Clear message if MAC is valid
                        flag1 = 0;
                    }
                }
            });
        } else {
            validationMessage.text('Invalid MAC address').css('color', 'red');
            flag1 = 1;
        }
    });

    // Form submission validation
    $('form').submit(function (event) {

        var mac1 = $('#MAC1').val();
        var mac2 = $('#MAC2').val();

        // **1. Prevent submission if flags indicate errors**
        if (flag == 1 || flag1 == 1) {
            event.preventDefault();
            return false;
        }

        var macRegex = /^([0-9A-Fa-f]{2}[:]{1}){5}[0-9A-Fa-f]{2}$/;
        let cleanMac1 = mac1.replace(/[:]/g, '').toLowerCase();
        let cleanMac2 = mac2.replace(/[:]/g, '').toLowerCase();

        // **2. Duplicate MAC check before submission**
        if (cleanMac1 === cleanMac2) {
            $('#validationMessage1').text('MAC1 and MAC2 cannot be the same.').css('color', 'red');
            event.preventDefault();
            return false;
        }
        if (mac2.includes('-')) {
            validationMessage.text('Mac address must contain only colons :').css('color', 'red');
            flag1 = 1;
            return false;
        }
        // **3. Validate MAC1 and MAC2 before submission**
        if (mac1 && !macRegex.test(mac1)) {
            $('#validationMessage').text('Invalid MAC address').css('color', 'red');
            event.preventDefault();
            return false;
        }

        if (mac2 && !macRegex.test(mac2)) {
            $('#validationMessage1').text('Invalid MAC address').css('color', 'red');
            event.preventDefault();
            return false;
        }

        // **4. Validate MAC1 and MAC2 via AJAX**
        if (mac1) {
            $.ajax({
                type: 'GET',
                url: "./Home/macdetailscheck",
                datatype: JSON,
                data: { 'macid': mac1 },
                success: function (response) {
                    if (response == 1) {
                        $('#validationMessage').text('This MAC ID was already accessed').css('color', 'red');
                        event.preventDefault();
                    } else {
                        flag = 0; // Reset flag if MAC1 is valid
                    }
                }
            });
        }

        if (mac2) {
            $.ajax({
                type: 'GET',
                url: "./Home/macdetailscheck",
                datatype: JSON,
                data: { 'macid': mac2 },
                success: function (response) {
                    if (response == 1) {
                        $('#validationMessage1').text('This MAC ID was already accessed').css('color', 'red');
                        event.preventDefault();
                    } else {
                        flag1 = 0; // Reset flag1 if MAC2 is valid
                    }
                }
            });
        }
    });



    function loaddata() {
        loadConfigView('69');
    }
    //function ConfirmForm() {

    //    var count = 0;
    //    $('#validmsg1').remove(); $('#validmsg2').remove(); $('#validmsg3').remove(); $('#validmsg4').remove();
    //    var val1 = $("#MAC1").val();
    //    var val2 = $("#MAC2").val();
    //    document.getElementById("otp").value = $("#otp_modal").val();
    //    var otpmodal = $("#otp").val();
    //    var otp_mac = $("#otp_original").val();
    //    if (val1 == 0 || val1 == null) {
    //        document.getElementById('MAC1').focus();
    //        $('#MAC1').parent().append('<span class="error" id="validmsg2"> Please enter MAC address 1</span>');
    //        $('#MAC1').val("");
    //        count++;
    //    }
    //    if (val1 == val2 && val1 != null && val2 != null) {
    //        $('#validationMessage2').append('<span class="error" id="validmsg3">Both MAC addresses should not be same</span>');
    //        $('#validationMessage2').val("");
    //        count++;
    //    }
    //    else if (otp_mac != otpmodal) {
    //        $('#otp_modal').parent().append('<span class="error" id="validmsg4">Please enter valid otp</span>');
    //        $('#otp_modal').val("");
    //        count++;
    //    }
    //    if (count == 0 && flag == 0 && flag1 == 0) {
    //        if ($("#form0").valid()) {
    //            swal({
    //                title: "Are you sure to confirm?",
    //                type: "warning",
    //                confirmButtonText: "Confirm",
    //                showCancelButton: true,
    //                closeOnClickOutside: false,
    //            })
    //                .then((willDelete) => {
    //                    if (willDelete.value) {
    //                        $("#btnsubmit").submit();
    //                        return false;
    //                    } else {
    //                        swal('Cancelled', '', 'error');
    //                        return false;
    //                    }
    //                });
    //        }
    //    }
    //}
    function validatetextbox(e) {
        var count = 0;
        debugger;
        $('#validmsg1').remove(); $('#validmsg2').remove(); $('#validmsg3').remove();
        var val1 = $("#MAC1").val();
        var val2 = $("#MAC2").val();
        if (val1 == 0 || val1 == null) {
            document.getElementById('MAC1').focus();
            $('#MAC1').parent().append('<span class="error" id="validmsg2"> Please enter MAC address 1</span>');
            $('#MAC1').val("");
            count++;
        }
        if (val1 == val2 && val1 != null && val2 != null) {
            $('#validationMessage2').append('<span class="error" id="validmsg3">Both MAC addresses should not be same</span>');
            $('#validationMessage2').val("");
            count++;
        }
        if (val2.includes('-')) {
            validationMessage.text('Mac address must contain only colons :').css('color', 'red');
            flag1 = 1;
            return false;
        }
        if (count == 0 && flag == 0 && flag1 == 0) {
            if ($("#form0").valid()) {
                swal({
                    title: "Are you sure to submit?",
                    type: "warning",
                    confirmButtonText: "Confirm",
                    showCancelButton: true,
                    closeOnClickOutside: false,
                })
                    .then((willDelete) => {
                        if (willDelete.value) {
                            $.ajax({
                                type: 'POST',
                                url: "./Home/getotp_mac",
                                datatype: JSON,
                                data: {},
                                success: (function (response) {
                                    debugger;
                                    if (response.msg == "successfull") {
                                        $("#myModalOTP").modal("show");
                                        document.getElementById("otp_original").value = response.otp;
                                        timerOn = true;
                                        timer(300);
                                        $("#btnsubmit1").prop("disabled", true);
                                        $("#Submitform").prop("disabled", false);
                                    }
                                    else if (response.msg == "Please update your mobile number in the View and update profile page") {
                                        swal('Please update your mobile number in the View and update profile page', '', 'warning');
                                    }


                                })
                            });
                            //return false;
                        } else {
                            swal('Cancelled', '', 'error');
                            return false;
                        }
                    });
            }
        }
    };
    function validatetextbox_resend(e) {

        $.ajax({
            type: 'POST',
            url: "./Home/getotp_mac",
            datatype: JSON,
            data: {},
            success: (function (response) {
                debugger;
                if (response.msg == "successfull") {
                    $("#myModalOTP").modal("show");
                    document.getElementById("otp_original").value = response.otp;
                    timerOn = true;
                    timer(300);
                    $("#btnsubmit1").prop("disabled", true);
                    $("#Submitform").prop("disabled", false);
                }
                else if (response.msg == "Please update your mobile number in the View and update profile page") {
                    swal('Please update your mobile number in the View and update profile page', '', 'warning'); validatetextbox_update
                }


            })
        });
    };

    function validatetextbox_update(e) {
        debugger;
        var count = 0;
        $('#validmsg1').remove(); $('#validmsg2').remove(); $('#validmsg3').remove();
        var val1 = $("#MAC1").val();
        var val2 = $("#MAC2").val();
        if (val1 == 0 || val1 == null) {
            document.getElementById('MAC1').focus();
            $('#MAC1').parent().append('<span class="error" id="validmsg2"> Please enter MAC address 1</span>');
            //$('#validationMessage').text("Both MAC addresses should not be same");
            $('#MAC1').val("");
            count++;
        }
        if (val1 == val2 && (val1 != "") && (val2 != "")) {
            // $('#validationMessage2').append('<span class="error" id="validmsg3">Both MAC addresses should not be same</span>');
            $('#validationMessage1').text("Both MAC addresses should not be same");
            $('#validationMessage1').val("");
            count++;
        }


        else if (val1.includes('-')) {

            // $('#MAC1').parent().append('<span class="error" id="validmsg2"> Mac address must contain only colons :</span>');

            $('#validationMessage1').text("Mac address must contain only colons :");
            flag1 = 1;
            return false;
        }
        else if (val2.includes('-')) {

            // $('#MAC2').parent().append('<span class="error" id="validmsg2"> Mac address must contain only colons :</span>');
            $('#validationMessage1').text("Mac address must contain only colons :");
            flag1 = 1;
            return false;
        }
        else if (count == 0 && flag == 0 && flag1 == 0) {
            if ($("#form0").valid()) {
                //swal({
                //    title: "Are you sure to update?",
                //    type: "warning",
                //    confirmButtonText: "Confirm",
                //    showCancelButton: true,
                //    closeOnClickOutside: false,
                //})
                //    .then((willDelete) => {
                //        if (willDelete.value) {
                //$.ajax({
                //    type: 'POST',
                //    url: "./Home/getotp_mac",
                //    datatype: JSON,
                //    data: {},
                //    success: (function (response) {

                //        if (response.msg == "successfull") {
                //            $("#myModalOTP").modal("show");
                //            document.getElementById("otp_original").value = response.otp;
                //            timerOn = true;
                //            timer(300);
                //            $("#btnsubmit1").prop("disabled", true);
                //            $("#Submitform").prop("disabled", false);
                //        }
                //        else if (response.msg == "Please update your mobile number in the View and update profile page") {
                //            swal('Please update your mobile number in the View and update profile page', '', 'warning');
                //        }

                //    })
                //});
                //return false;


                /*   if ($("#form0").valid()) {*/
                swal({
                    title: "Are you sure to confirm?",
                    type: "warning",
                    confirmButtonText: "Confirm",
                    showCancelButton: true,
                    closeOnClickOutside: false,
                })
                    .then((willDelete) => {
                        if (willDelete.value) {
                            $("#btnsubmit").submit();
                            return false;
                        } else {
                            swal('Cancelled', '', 'error');
                            return false;
                        }
                    });
                /* }*/
            }
            //else {
            //                swal('Cancelled', '', 'error');
            //                return false;
            //            }
            /* });*/
        }
    }

    function removemsg1(id) {

        var val1 = $("#MAC1").val();
        var val2 = $("#MAC2").val();
        $('#validationMessage2').text('');
        if (val1 == val2 && val1 != null && val2 != null) {
            $('#validationMessage2').append('<span class="error" id="validmsg3">Both MAC addresses should not be same</span>');
        }

    }
    function removemsg(id) {
        $('#validationMessage2').text('');
        $('#' + id).remove();

    }
    function Reset_mac() {

        $('#validationMessage1').text('');
        $('#validationMessage').text('');
        $('#validationMessage2').text('');
        loadConfigView('69');
    }

</script>

<script>

        function enableEdit() {
        $.ajax({
            url: '@Url.Action("EnableEdit", "Home")', // Call the action that returns the partial view
            type: 'GET',
            data: { regdno: '@Model.Regdno' }, // Send the registration number as a parameter
            success: function (data) {
                debugger;
                console.log(data);
                // Inject the returned partial view into the modal's content div
                $('#macModalContent').html(data);
                // Show the modal
                $('#macModalContent').show();
                $('#macEditModal').modal('show');
            },
            error: function () {
                alert("Error loading the MAC edit view.");
            }
        });
    }
</script>

<!--<script>-->
@*function enableEdit() {
    $.ajax({
        url: '@Url.Action("EnableEdit", "Home")', // Call the action that returns the partial view
        type: 'GET',
        data: { regdno: '@Model.Regdno' }, // Send the registration number as a parameter
        success: function (data) {
        // Inject the returned partial view into the modal's content div
        $('#macModalContent').html(data);

        // Show the modal
        $('#macModalContent').show();
        $('#macEditModal').modal('show');

        // Reapply MAC validations in the modal after loading the content
        //setupMacValidationsInModal();
        },
        error: function () {
        alert("Error loading the MAC edit view.");
        }
        });
        }*@
@*function enableEdit() {
        $.ajax({
            url: '@Url.Action("EnableEdit", "Home")',
            type: 'GET',
            data: { regdno: '@Model.Regdno' },
            success: function (data) {
                $('#macModalContent').html(data);
                $('#macEditModal').modal('show');

                // Apply validation once the modal is loaded
                $('#MAC11').on('input', function () {
                    validateMACAddress($('#MAC11').val(), '#validationMessage');
                });

                $('#MAC22').on('input', function () {
                    validateMACAddress($('#MAC22').val(), '#validationMessage1');
                });
            },
            error: function () {
                alert("Error loading the MAC edit view.");
            }
        });
    }
        function validateMACAddress(macAddress, validationElement) {
            var macRegex = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;

            // Check for randomized MAC (2, 6, A, E in second position)
            if (macAddress.length > 1 && ['2', '6', 'A', 'E', 'a', 'e'].includes(macAddress[1])) {
                $(validationElement).text('MAC address is randomized and cannot be used.');
                return;
            }

            // Check if the MAC address is already used
            if (macRegex.test(macAddress)) {
                $.ajax({
                    type: 'GET',
                    url: "./Home/macdetailscheck",
                    datatype: 'JSON',
                    data: { 'macid': macAddress },
                    success: function (response) {
                        if (response == 1) {
                            $(validationElement).text('This MAC address is already used.');
                        } else {
                            $(validationElement).text('');
                        }
                    }
                });
            } else {
                $(validationElement).text('Invalid MAC address.');
            }
        }*@
<!--</script>-->
<script>
    //   var flag = 0;  // Global flag for validation

    //function validateMACAddress(event) {
    //    var macAddress = event.target.value;
    //    var validationMessage = document.getElementById('validationMessagenew');


    //    var macRegex = /^([0-9A-Fa-f]{2}[:\-]){5}([0-9A-Fa-f]{2})$/;

    //    // Check if it's a valid MAC Address
    //    if (!macRegex.test(macAddress)) {
    //        validationMessage.innerHTML = "Invalid MAC address format";
    //        flag = 1;
    //        return false;
    //    } else {
    //        validationMessage.innerHTML = "";  // Clear the error message
    //    }



    //    // Extract the second character of the first octet
    //    var secondChar = macAddress.charAt(1).toUpperCase();

    //    // Check if the second character is 2, 6, A, or E
    //    if (['2', '6', 'A', 'E'].includes(secondChar)) {
    //        validationMessage.innerHTML = "The MAC address is randomized.";
    //        flag = 1;
    //        return false;
    //    }

    //    // Check if the MAC address has been used before
    //    $.ajax({
    //        type: 'GET',
    //        url: "./Home/macdetailscheck",
    //        datatype: JSON,
    //        data: { 'macid': macAddress },
    //        success: function (response) {
    //            if (response == 1) {
    //                validationMessage.innerHTML = "This MAC ID was already accessed";
    //                flag = 1;
    //            } else {
    //                validationMessage.innerHTML = "";  // Clear the error message
    //                flag = 0;
    //            }
    //        }
    //    });
    //}


    //function validateMACAddress2(event) {
    //    var macAddress = event.target.value;
    //    var validationMessage = document.getElementById('validationMessagenew1');
    //    var mac1Address = document.getElementById('MAC11').value;  // Get MAC1 value

    //    // Regular expression for a valid MAC address (either with colons or hyphens)
    //    var macRegex = /^([0-9A-Fa-f]{2}[:\-]){5}([0-9A-Fa-f]{2})$/;

    //    // Clean the MAC addresses by removing colons and hyphens to treat them as the same
    //    let cleanMac1 = mac1Address.replace(/[:\-]/g, '').toLowerCase();
    //    let cleanMac2 = macAddress.replace(/[:\-]/g, '').toLowerCase();

    //    // Check if MAC2 is the same as MAC1 (after cleaning)
    //    if (cleanMac1 == cleanMac2 && cleanMac2 !== "") {
    //        validationMessage.innerHTML = "MAC1 and MAC2 cannot be the same.";
    //        flag = 1;
    //        return false;
    //    }

    //    // Check if it's a valid MAC Address
    //    if (!macRegex.test(macAddress)) {
    //        validationMessage.innerHTML = "Invalid MAC address format";
    //        flag = 1;
    //        return false;
    //    } else {
    //        validationMessage.innerHTML = "";  // Clear the error message
    //    }

    //    // Extract the second character of the first octet
    //    var secondChar = macAddress.charAt(1).toUpperCase();

    //    // Check if the second character is 2, 6, A, or E (Randomized MAC)
    //    if (['2', '6', 'A', 'E'].includes(secondChar)) {
    //        validationMessage.innerHTML = "The MAC address is randomized.";
    //        flag = 1;
    //        return false;
    //    }

    //    // Check if the MAC address has been used before
    //    $.ajax({
    //        type: 'GET',
    //        url: "./Home/macdetailscheck",
    //        datatype: JSON,
    //        data: { 'macid': cleanMac2 },  // Send cleaned MAC address for the check
    //        success: function (response) {
    //            if (response == 1) {
    //                validationMessage.innerHTML = "This MAC ID was already accessed";
    //                flag = 1;
    //            } else {
    //                validationMessage.innerHTML = "";  // Clear the error message
    //                flag = 0;
    //            }
    //        }
    //    });
    //}

    var flag = 0;  // Global flag for validation

    // Utility function to normalize the MAC address (remove colons and hyphens)
    function normalizeMacAddress(macAddress) {
        return macAddress.replace(/[:\-]/g, '').toLowerCase();  // Remove colons and hyphens, and convert to lowercase
    }

    function validateMACAddress(event) {
        debugger;
        var macAddress = event.target.value;
        var validationMessage = document.getElementById('validationMessagenew');

        // First, check for hyphens in the MAC address
        if (macAddress.includes('-')) {
            validationMessage.textContent = 'MAC address must contain only colons :';
            validationMessage.style.color = 'red';
            flag1 = 1;
            return false;
        }

        // Normalize the MAC address
        var normalizedMac = normalizeMacAddress(macAddress);

        // MAC address regex (only colons allowed, no hyphens)
        var macRegex = /^([0-9A-Fa-f]{2}[:]{1}){5}[0-9A-Fa-f]{2}$/;

        // Validate MAC format
        if (!macRegex.test(macAddress)) {
            validationMessage.innerHTML = "Invalid MAC address format";
            flag = 1;
            return false;
        } else {
            validationMessage.innerHTML = "";  // Clear the error message
        }

        // Extract the second character of the first octet (normalized version)
        var secondChar = normalizedMac.charAt(1).toUpperCase();

        // Check if the second character is 2, 6, A, or E (Randomized MAC)
        if (['2', '6', 'A', 'E'].includes(secondChar)) {
            validationMessage.innerHTML = "The MAC address is randomized.";
            flag = 1;
            return false;
        }

        // Check if the normalized MAC address has been used before
        $.ajax({
            type: 'GET',
            url: "./Home/macdetailscheck",
            datatype: JSON,
            data: { 'macid': normalizedMac },  // Send the normalized MAC address for the check
            success: function (response) {
                if (response == 1) {
                    validationMessage.innerHTML = "This MAC ID was already accessed";
                    flag = 1;
                } else {
                    validationMessage.innerHTML = "";  // Clear the error message
                    flag = 0;
                }
            }
        });
    }
    // Validate MAC2 address
    function validateMACAddress2(event) {
        debugger;
        var macAddress = event.target.value;
        var validationMessage = document.getElementById('validationMessagenew1');
        var mac1Address = document.getElementById('MAC11').value;  // Get MAC1 value



        if (macAddress.includes('-')) {
            validationMessage.textContent = 'MAC address must contain only colons :'; // Use textContent or innerHTML
            validationMessage.style.color = 'red';  // Set the text color
            flag1 = 1;
            return false;
        }

        // Normalize both MAC addresses
        let cleanMac1 = normalizeMacAddress(mac1Address);
        let cleanMac2 = normalizeMacAddress(macAddress);

        // Check if MAC2 is the same as MAC1 (after normalization)
        if (cleanMac1 == cleanMac2 && cleanMac2 !== "") {
            validationMessage.innerHTML = "MAC1 and MAC2 cannot be the same.";
            flag = 1;
            return false;
        }

        // MAC address regex (either with colons or hyphens)
        var macRegex = /^([0-9A-Fa-f]{2}[:]{1}){5}[0-9A-Fa-f]{2}$/; // Updated regex to allow only colon format

        // Validate MAC format
        if (!macRegex.test(macAddress)) {
            validationMessage.innerHTML = "Invalid MAC address format";
            flag = 1;
            return false;
        } else {
            validationMessage.innerHTML = "";  // Clear the error message
        }

        // Extract the second character of the first octet (normalized version)
        var secondChar = cleanMac2.charAt(1).toUpperCase();

        // Check if the second character is 2, 6, A, or E (Randomized MAC)
        if (['2', '6', 'A', 'E'].includes(secondChar)) {
            validationMessage.innerHTML = "The MAC address is randomized.";
            flag = 1;
            return false;
        }

        // Check if the normalized MAC address has been used before
        $.ajax({
            type: 'GET',
            url: "./Home/macdetailscheck",
            datatype: JSON,
            data: { 'macid': cleanMac2 },  // Send the normalized MAC address for the check
            success: function (response) {
                if (response == 1) {
                    validationMessage.innerHTML = "This MAC ID was already accessed";
                    flag = 1;
                } else {
                    validationMessage.innerHTML = "";  // Clear the error message
                    flag = 0;
                }
            }
        });
    }
    // Function to handle form submission
    function mac_update() {
        var mac1 = document.getElementById('MAC11').value;
        var mac2 = document.getElementById('MAC22').value;
        // Check for form submission
        let cleanMac1 = normalizeMacAddress(mac1);
        let cleanMac2 = normalizeMacAddress(mac2);
        var secondChar = cleanMac2.charAt(1).toUpperCase();
        var secondChar1 = cleanMac1.charAt(1).toUpperCase();
        var macRegex = /^([0-9A-Fa-f]{2}[:]{1}){5}[0-9A-Fa-f]{2}$/; // Updated regex to allow only colon format
        if (flag == 0) {


            // Normalize both MAC addresses
            let cleanMac1 = normalizeMacAddress(mac1);
            let cleanMac2 = normalizeMacAddress(mac2);

            // Check if MAC1 and MAC2 are the same
            if (cleanMac1 === cleanMac2 && mac2 !== "") {
                document.getElementById('validationMessagenew1').innerHTML = "MAC1 and MAC2 cannot be the same.";
                return false;
            }
            else if (mac1.includes('-')) {
                validationMessagenew.textContent = 'MAC address must contain only colons :'; // Use textContent or innerHTML
                validationMessagenew.style.color = 'red';  // Set the text color
                flag1 = 1;
                return false;
            }
            else if (mac2.includes('-')) {
                validationMessagenew1.textContent = 'MAC address must contain only colons :'; // Use textContent or innerHTML
                validationMessagenew1.style.color = 'red';  // Set the text color
                flag1 = 1;
                return false;
            }

            // Validate MAC format
            else if (!macRegex.test(mac1)) {
                validationMessagenew.innerHTML = "Invalid MAC address format";
                flag = 1;
                return false;
            }
            else if (['2', '6', 'A', 'E'].includes(secondChar)) {
                validationMessage.innerHTML = "The MAC address is randomized.";
                flag = 1;
                return false;
            }
            else if (['2', '6', 'A', 'E'].includes(secondChar1)) {
                validationMessage.innerHTML = "The MAC address is randomized.";
                flag = 1;
                return false;
            }
            else {
                document.getElementById('validationMessagenew1').innerHTML = "";
                document.getElementById('validationMessagenew').innerHTML = "";
            }

            $('#form1').submit();
        }
    }



</script>
<script>
    //var flag = 0;
    //function validateMACAddress(event) {
    //    debugger;
    //    var macAddress = event.target.value;
    //    var validationMessage = document.getElementById('validationMessagenew');


    //    var macRegex = /^([0-9A-Fa-f]{2}[:\-]){5}([0-9A-Fa-f]{2})$/;

    //    // Check if it's a valid MAC Address
    //    if (!macRegex.test(macAddress)) {
    //        console.log('Invalid MAC address format');
    //        document.getElementById('validationMessagenew').innerHTML = "Invalid MAC address formats";
    //        //  $('#validationMessage').text('Invalid MAC address formats');
    //        //enableEdit();

    //        flag = 1;
    //        return false; // Invalid MAC Address format
    //    }
    //    else {
    //        document.getElementById('validationMessagenew').innerHTML = "";
    //    }
    //    // Extract the second character of the first octet
    //    var secondChar = macAddress.charAt(1).toUpperCase();

    //    // Check if the second character is 2, 6, A, or E
    //    if (secondChar === '2' || secondChar === '6' || secondChar === 'A' || secondChar === 'E') {

    //        document.getElementById('validationMessagenew').innerHTML = "The MAC address is randomized.";
    //        flag = 1;
    //        return false;


    //    } else {
    //        $.ajax({
    //            type: 'GET',
    //            url: "./Home/macdetailscheck",
    //            datatype: JSON,
    //            data: { 'macid': macAddress },
    //            success: function (response) {
    //                if (response == 1) {
    //                    document.getElementById('validationMessagenew').innerHTML = "This MAC ID was already accessed";
    //                    flag = 1;
    //                    return false;
    //                } else {
    //                    document.getElementById('validationMessagenew').innerHTML = "";
    //                    flag = 0;
    //                }
    //            }
    //        });

    //    }



    //}
    //function validateMACAddress2(event) {
    //    debugger;
    //    var macAddress = event.target.value;
    //    var validationMessage = document.getElementById('validationMessagenew1');


    //    var macRegex = /^([0-9A-Fa-f]{2}[:\-]){5}([0-9A-Fa-f]{2})$/;

    //    // Check if it's a valid MAC Address
    //    if (!macRegex.test(macAddress)) {
    //        console.log('Invalid MAC address format');
    //        document.getElementById('validationMessagenew1').innerHTML = "Invalid MAC address formats";
    //        //  $('#validationMessage').text('Invalid MAC address formats');
    //        //enableEdit();

    //        flag = 1;
    //        return false; // Invalid MAC Address format
    //    }
    //    else {
    //        document.getElementById('validationMessagenew1').innerHTML = "";
    //    }
    //    // Extract the second character of the first octet
    //    var secondChar = macAddress.charAt(1).toUpperCase();

    //    // Check if the second character is 2, 6, A, or E
    //    if (secondChar === '2' || secondChar === '6' || secondChar === 'A' || secondChar === 'E') {

    //        document.getElementById('validationMessagenew1').innerHTML = "The MAC address is randomized.";
    //        flag = 1;
    //        return false;


    //    } else {
    //        $.ajax({
    //            type: 'GET',
    //            url: "./Home/macdetailscheck",
    //            datatype: JSON,
    //            data: { 'macid': macAddress },
    //            success: function (response) {
    //                if (response == 1) {
    //                    document.getElementById('validationMessagenew1').innerHTML = "This MAC ID was already accessed";
    //                    flag = 1;
    //                    return false;
    //                } else {
    //                    document.getElementById('validationMessagenew1').innerHTML = "";
    //                    flag = 0;
    //                }
    //            }
    //        });

    //    }



    //}
    //function mac_update() {
    //    if (flag == 0) {

    //        $('#form1').submit();
    //    }

    //}
</script>s